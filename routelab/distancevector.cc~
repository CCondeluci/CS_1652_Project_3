#include "distancevector.h"
#include "context.h"

DistanceVector::DistanceVector(unsigned n, SimulationContext* c, double b, double l) :
    Node(n, c, b, l)
{}

DistanceVector::DistanceVector(const DistanceVector & rhs) :
    Node(rhs)
{
    *this = rhs;
}

DistanceVector & DistanceVector::operator=(const DistanceVector & rhs) {
    Node::operator=(rhs);
    return *this;
}

DistanceVector::~DistanceVector() {}

void DistanceVector::LinkHasBeenUpdated(Link* l) {
    cerr << "\n" << *this << ": Link Update: " << *l << endl;
    
    int dest_node = l->GetDest();
    int new_lat = l->GetLatency();
    // Set your neighbor cost to be the new cost
    routing_table.neighborLinks[dest_node].cost = new_lat;
    // Set distance vector to -1 to trigger recalulation
    routing_table.distanceVector[dest_node].cost = -1;
    // Set the topo for this desttination to self as zero
    routing_table.topo[dest_node][dest_node].cost = 0;
    // If the Distance Vector is updateded send it to your neighbors.
    if (updateDV()) {
      SendToNeighbors(new RoutingMessage(number, routing_table.distanceVector));
    }
}

void DistanceVector::ProcessIncomingRoutingMessage(RoutingMessage *m) {
    cerr << *this << " got a routing message: " << *m << " (ignored)" << endl;
    // Overwrite topo table for this node to the new distance vecotr
    routing_table.topo[m->sendingNode] = m->distanceVector;
    map<int, TopoLink>::const_iterator message_itr;
    // for each node the sendingNode can get to check for it in our destance vector so that the the index is initalized
    for (message_itr = m->distanceVector.begin(); message_itr != m->distanceVector.end(); message_itr++) {
      if (routing_table.distanceVector[message_itr->first].cost == -1) {
      }
    }
    // If the Distance Vector is updateded send it to your neighbors.
    if (updateDV()) {
      SendToNeighbors(new RoutingMessage(number, routing_table.distanceVector));
    }
}

void DistanceVector::TimeOut() {
    cerr << *this << " got a timeout: (ignored)" << endl;
}

bool DistanceVector::updateDV() {
  bool updated = false;
  map<int, TopoLink>::const_iterator dv;
  map<int, TopoLink>::const_iterator neighbor;
  // for all the nodes in your distance vector
  for (dv = routing_table.distanceVector.begin(); dv != routing_table.distanceVector.end(); dv++) {
    int curr_node = dv->first;
    // cout << "Current node: " << curr_node << std::endl;
    // set your entry to 0
    if ((unsigned)curr_node == number) {
      routing_table.distanceVector[curr_node].cost = 0;
      continue;
    }
    int curr_min = MAX_INT;
    int new_path = 0;
    int next_hop = -1;
    // For all your neighbors
    for (neighbor = routing_table.neighborLinks.begin(); neighbor != routing_table.neighborLinks.end(); neighbor++) {
      int curr_neighbor = neighbor->first;
      // cout << curr_neighbor;
      // If you have a cost to get to your neighbor and your neighbor has a cost to get to destination node
      if (routing_table.neighborLinks[curr_neighbor].cost != -1 && 
          routing_table.topo[curr_neighbor][curr_node].cost != -1) {
        // new path is the distance to neighbor plus the distance from the neighbor to the destination.
        new_path = routing_table.neighborLinks[curr_neighbor].cost + routing_table.topo[curr_neighbor][curr_node].cost;
        // If this path is shorter update the current minimum.
        if (new_path < curr_min) {
          curr_min = new_path;
          next_hop = curr_neighbor;
        }
      }
    }
    // if the current minimum is new update the routing table and the change flag
    if (curr_min != MAX_INT && curr_min != routing_table.distanceVector[curr_node].cost) {
      routing_table.distanceVector[curr_node].cost = curr_min;
      routing_table.edgeTo[curr_node] = next_hop;
      updated = true;
    }
  }
  return updated; 
}

Node* DistanceVector::GetNextHop(Node *destination) { 
    Node *temp = new Node(routing_table.edgeTo[destination->GetNumber()], NULL, 0, 0);
    Node *real = context->FindMatchingNode(const_cast<Node *>(temp));
    return real;
}

Table* DistanceVector::GetRoutingTable() {
    Table *temp = new Table(routing_table);
    return temp;
}

ostream & DistanceVector::Print(ostream &os) const { 
    Node::Print(os);
    return os;
}
